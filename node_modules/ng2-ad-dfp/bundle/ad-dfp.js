"use strict";
var core_1 = require('@angular/core');
var http_1 = require('@angular/http');
var AdDFPComponent = (function () {
    function AdDFPComponent(_http) {
        this._http = _http;
    }
    AdDFPComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.getSettings().subscribe(function (data) {
            _this.settings = data.json();
            _this.defineAds(_this.settings, googletag);
            var tag = _this.getTag(_this.type, _this.settings);
            if (_this.settings.adBlockDetector) {
                _this.detectAdBlocker();
            }
            if (_this.type != "hidden_inter") {
                _this.displayAd(tag);
            }
        });
    };
    AdDFPComponent.prototype.detectAdBlocker = function () {
        if (typeof isAdBlockEnabled === 'undefined') {
            this.showDetectedAdBlocker();
        }
    };
    AdDFPComponent.prototype.showDetectedAdBlocker = function () {
        if (typeof adsFunction !== 'undefined') {
            adsFunction();
        }
    };
    AdDFPComponent.prototype.getTag = function (type, settings) {
        var tag;
        if (type == "banner") {
            tag = settings.tags.banner;
        }
        else if (type == "inter" || type == "hidden_inter") {
            tag = settings.tags.inter;
        }
        else {
            tag = 0;
        }
        return tag;
    };
    AdDFPComponent.prototype.displayAd = function (tag) {
        document.getElementsByClassName(this.type)[0].setAttribute("id", "div-gpt-ad-" + tag + "-0");
        if (googletag && googletag.apiReady) {
            googletag.cmd.push(function (result) {
                googletag.display('div-gpt-ad-' + tag + '-0');
            });
        }
    };
    AdDFPComponent.prototype.defineAds = function (settings, googletag) {
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
        var gptAdSlots = [];
        googletag.cmd.push(function () {
            var mappingBanner = googletag.sizeMapping().
                addSize([320, 400], [settings.mapping.mobile.width, settings.mapping.mobile.height]).
                addSize([728, 400], [settings.mapping.tablet.width, settings.mapping.tablet.height]).
                addSize([1024, 400], [settings.mapping.desktop.width, settings.mapping.desktop.height]).
                build();
            if (settings.ID.banner !== 0) {
                gptAdSlots[0] = googletag.defineSlot("/" + settings.network + "/" + settings.ID.banner, [[settings.mapping.mobile.width, settings.mapping.mobile.height], [settings.mapping.tablet.width, settings.mapping.tablet.height], [settings.mapping.desktop.width, settings.mapping.desktop.height]], "div-gpt-ad-" + settings.tags.banner + "-0").
                    defineSizeMapping(mappingBanner).
                    addService(googletag.pubads());
            }
            if (settings.ID.inter !== 0) {
                gptAdSlots[1] = googletag.defineOutOfPageSlot("/" + settings.network + "/" + settings.ID.inter, "div-gpt-ad-" + settings.tags.inter + "-0")
                    .addService(googletag.pubads());
            }
            googletag.pubads().enableSingleRequest();
            googletag.pubads().collapseEmptyDivs();
            googletag.enableServices();
        });
    };
    AdDFPComponent.prototype.getSettings = function () {
        return this._http.get('assets/settings/settings.json');
    };
    AdDFPComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'ad-dfp',
                    template: "\n        <div class=\"adContainer\" style=\"text-align: center;\">\n            <div class={{type}} >\n\n            </div>\n        </div>\n    "
                },] },
    ];
    AdDFPComponent.ctorParameters = function () { return [
        { type: http_1.Http, },
    ]; };
    AdDFPComponent.propDecorators = {
        'type': [{ type: core_1.Input },],
    };
    return AdDFPComponent;
}());
exports.AdDFPComponent = AdDFPComponent;
//# sourceMappingURL=ad-dfp.js.map